"""This module will be used for functionalities of the employee"""
import PySimpleGUI as sg
import mysql.connector as sqltor
from mysql.connector import errors as mysql_errors

file=open('settings.txt')
data=file.readlines()
file.close()
for i in range(len(data)):
    data[i]=data[i][:-1]
mycon = sqltor.connect(host=data[0], user=data[1], passwd=data[2],database=data[3])
cursor = mycon.cursor()

def load_matplotlib():
    import matplotlib.pyplot as plt
    import matplotlib.dates as mpl_dates
    import numpy as np

def main(emp = ''):
    """This Function is responsible for the display of Employee Screen"""
    global data
    global data_product
    sg.theme('DarkAmber')
    font = ("Arial", 11)
    stck_data = display_stock()
    f = ("Arial",15)
    cursor.execute("select DISTINCT YEAR(Purchase_Date) from PURCHASE order by year(Purchase_Date)")
    year = cursor.fetchall()
    stats = [[sg.Text('Finance',font = f)],
            [sg.Text('Daily Profit:',size = (15,1),font = ('Arial',13)),sg.Combo(default_value = '7',values =
        [str(i) for i in range(1,31)],key = 'daily_profit',readonly = True,size=(7,1)),sg.Button('GO',k='Go1')],
        [sg.Text('Monthly Profit:',size = (15,1),font = ('Arial',13)),sg.Combo(default_value = year[-1],values = year,k = 'y1m',readonly = True),
        sg.Combo(default_value = year[-2],values = year,key = 'y2m',readonly = True),sg.Button('GO',k='Go2')],
        [sg.Text('Revenue Generated per Category',font = ('Arial',13))],
        [sg.Combo(default_value = '-',values = ['Trend','Comparision'],readonly = True,enable_events=True,key='Cat_rev'),
        sg.Combo(default_value = year[0],values = year,k = 'year1',readonly = True,disabled = True),
        sg.Combo(default_value = year[-1],values = year,k = 'year2',readonly = True,disabled = True),
        sg.Button('Go',key = 'Go3',disabled=True)],
        [sg.Text('Revenue Generated by Brand',font = ('Arial',13))],
        [sg.Combo(default_value = '-',values = ['Trend','Comparision'],readonly = True,enable_events=True,key='Brand_rev'),
        sg.Combo(default_value = year[-1],values = year,k = 'year1_b',readonly = True,disabled = True),
        sg.Combo(default_value = year[-1],values = year,k = 'year2_b',readonly = True,disabled = True),
        sg.Button('Go',key = 'Go_b',disabled=True)]]
    customer_det = cust_details()
    layout = [
        [sg.Text(f"Welcome {emp}",font=font)],
        [sg.Text('')],
        [sg.Text('Please choose the function')],
        [sg.TabGroup([
        [sg.Tab("Edit Stock Data",stck_data,key = 'Edit'),
            sg.Tab("Statistics",stats),sg.Tab("See Customer Details",customer_det)]],key='Tabs')],
        [sg.Text("")]
    ]
    win = sg.Window('Welcome',layout)
    while True:
        event,value = win.read()
        if event in (None, 'Exit'):
            break
        if event == 'show':
            show_details(data[value['cust_Table'][0]])
        if event == 'Add':
            add_stock()
            cursor.execute("SELECT * FROM PRODUCTS")
            data = cursor.fetchall()
            win['Table'].update(data)
        elif event == 'Update':
            try:
                prod_clicked = value['Table'][0]
                prod_click_id = int(data_product[prod_clicked][0])
                update_data(prod_click_id)
                cursor.execute("SELECT * FROM PRODUCTS")
                data = cursor.fetchall()
                win['Table'].update(data)
            except IndexError:
                sg.popup( "Warning: No Product Selected",title = "WARNING")
        elif event == 'Delete' :
            try:
                prod_clicked = value['Table'][0]
                prod_click_id = int(data_product[prod_clicked][0])
                #print(prod_click_id)
                cursor.execute(f"DELETE FROM PRODUCTS WHERE ID = {prod_click_id}")
                mycon.commit()
                cursor.execute("SELECT * FROM PRODUCTS")
                data_product = cursor.fetchall()
                win['Table'].update(data_product)
            except IndexError:
                sg.popup('NO PRODUCTS SELECTED')
        if event == "sort_amt":
            query = """SELECT Name,Phone_Number,Email_ID,Total_Price FROM CUSTOMERS
            ORDER BY Total_Price DESC"""
            cursor.execute(query)
            data =  cursor.fetchall()
            win['cust_Table'].update(data)
            win['email'].update('')
            win['name'].update('')
            win['mob'].update('')
        if event=='sort_name':
            query="""SELECT Name,Phone_Number,Email_ID,Total_Price FROM CUSTOMERS
            ORDER BY Name"""
            cursor.execute(query)
            data=cursor.fetchall()
            win['cust_Table'].update(data)
            win['email'].update('')
            win['name'].update('')
            win['mob'].update('')
        if event=='name' and value:
            query = """Select Name,Phone_Number,Email_ID,Total_Price from CUSTOMERS
            where name like '{}%' and Email_ID like '{}%' and Phone_Number like '{}%'
            """.format(value['name'],value['email'],value['mob'])
            cursor.execute(query)
            data =  cursor.fetchall()
            win['cust_Table'].update(data)
        elif event=='email':
            query = """Select Name,Phone_Number,Email_ID,Total_Price from customers
            where name like '{}%' and email_id like '{}%' and phone_number like '{}%'
            """.format(value['name'],value['email'],value['mob'])
            cursor.execute(query)
            data =  cursor.fetchall()
            win['cust_Table'].update(data)
        elif event=='mob':
            query = """Select Name,Phone_Number,Email_ID,Total_Price from customers
            where name like '{}%' and email_id like '{}%' and phone_number like '{}%'
            """.format(value['name'],value['email'],value['mob'])
            #print(query)
            cursor.execute(query)
            data =  cursor.fetchall()
            #print(data)
            win['cust_Table'].update(data)
        if event == 'cust_Table' and value['cust_Table']!=[]:
            em = data[value['cust_Table'][0]][2] #Basically extracting email
            win['show_det'].update(em)
            win['show'].update(disabled = False)
        if event == 'Go1':
            print(value['daily_profit'])
            daily_profit(value['daily_profit'])
            
        elif event == 'Go2':
            year1 = value['y1m'][0]
            year2 = value['y2m'][0]
            monthly(year1,year2)
            #print(year1,year2)
        if event == 'Cat_rev' and value['Cat_rev'] == 'Trend':
            win['year1'].update(disabled = True)
            win['year2'].update(disabled=False)
            win['Go3'].update(disabled = False)
        if event == 'Cat_rev' and value['Cat_rev'] == 'Comparision':
            win['year1'].update(disabled = False)
            win['year2'].update(disabled=False)
            win['Go3'].update(disabled = False)
        if event == 'Go3' and value['Cat_rev'] == 'Comparision':
            categ_rev_comp(value['year1'][0],value['year2'][0])
        if event == 'item_sold':
            brand_item()
        if event == 'Brand_rev' and value['Brand_rev'] == 'Comparision':
            win['year1_b'].update(disabled = False)
            win['year2_b'].update(disabled=False)
            win['Go_b'].update(disabled = False)
        elif event == 'Brand_rev' and value['Brand_rev'] == 'Trend':
            win['year1_b'].update(disabled = True)
            win['year2_b'].update(disabled=False)
            win['Go_b'].update(disabled = False)
        if event == 'Go_b' and value['Brand_rev'] == 'Trend':
            brand_item()
        if event == 'Go_b' and value['Brand_rev'] == 'Comparision':
            pass
def display_stock():
    """This displays the products"""
    cursor.execute("SELECT * FROM PRODUCTS")
    global data_product
    data_product = cursor.fetchall()
    for i in range(len(data_product)):
        data_product[i] = list(data_product[i])
        for j in range(len(data_product[i])):
            if isinstance(data_product[i][j],int):
                data_product[i][j] = str(data_product[i][j])
    heading = ['Prod ID','Name','Brand','Size','Quantity','Cost_Price','Selling_Price']
    layout1 = [[sg.Text('Product List')],
    [sg.Table(data_product,headings = heading,key = 'Table',justification='left'
    ,auto_size_columns=True,expand_y = True)],
    [sg.Button('Add',key = 'Add'),sg.Button('Update Stock',key = 'Update'),
        sg.Button('Delete',key = 'Delete')]]
    return layout1
def add_stock():
    """This function enables the employee to add new products in stock"""
    msg = sg.Text('Enter appropriate data')
    lay = [[msg],[sg.Text('Enter Product ID',size = (18,1)),
            sg.Input(key = 'id',enable_events=True)],
    [sg.Text('Product Name',size = (18,1)),sg.Input(key = 'name',enable_events=True)],
    [sg.Text('Product Brand',size = (18,1)),sg.Input(key = 'brand',enable_events=True)],
    [sg.Text('Product Size',size = (18,1)),sg.Input(key = 'size',enable_events=True)],
    [sg.Text('Product Quantity',size = (18,1)),sg.Input(key = 'quantity',enable_events=True)],
    [sg.Text('Product Cost Price',size = (18,1)),sg.Input(key = 'cost_price',enable_events=True)],
    [sg.Text('Product Sell Price',size=(18,1)),sg.Input(key ='selling_price',enable_events=True)],
    [sg.Text('Product Category',size = (18,1)),sg.Input(key ='category',enable_events=True)]]
    layout = [[sg.Frame("Add New Stock",lay)],
    [sg.Button('Go Back'),sg.Button('Confirm',key = 'Confirm')]
    ]
    window = sg.Window("New Product",layout=layout)
    while True:
        event,value = window.read()
        #print(event,value)
        if event in (None, "Go Back"):
            window.close()
            break
        try:
            if event == 'Confirm':
                insert_prod = """INSERT INTO PRODUCTS
                (ID,Name,Brand,Size,Quantity,Cost_Price,Selling_Price, Category)
                Values(%s,%s,%s,%s,%s,%s,%s,%s)"""
                upd_value = [list(value.values())]
                cursor.executemany(insert_prod,upd_value)
                mycon.commit()
                sg.popup('Stock Added to Database')
                window.close()
                #print(upd_value)
                break
        except mysql_errors.DatabaseError:
            msg.update("WRONG DATA ENTERED",text_color='Red')
def update_data(ID):
    """This function allows employee to modify the details of existing stock"""
    lay = [[sg.Text('Product ID',size = (18,1),),
        sg.Input(default_text = ID, key = 'ID',readonly=True,tooltip = "It's Read Only",
            disabled_readonly_background_color='Gray',disabled_readonly_text_color='Black')],
    [sg.Text('Product Name',size = (18,1)),sg.Input(key = 'Name')],
    [sg.Text('Product Brand',size = (18,1)),sg.Input(key = 'Brand')],
    [sg.Text('Product Size',size = (18,1)),sg.Input(key = 'Size')],
    [sg.Text('Quantity of Product',size = (18,1)),sg.Input(key = 'Quantity')],
    [sg.Text('Cost Price of Product',size = (18,1)),sg.Input(key = 'Cost_Price')],
    [sg.Text('Selling Price of Product',size = (18,1)),sg.Input(key ='Selling_Price')]
    ]
    msg=sg.Text("Instructions: The data which is not to be updated shall be left blank")
    layout=[[msg],
        [sg.Frame("Add New Stock",lay)],
    [sg.Button('Go Back'),sg.Button('Confirm')]
    ]
    win = sg.Window('Update Data',layout,finalize=True)
    while True:
        event,value=win.read()
        if event is None:
            break
        try:
            if event == 'Confirm':
                for i in value:
                    if value[i] != '' and i!= 'ID':
                        print(i,value[i])
                        cursor.execute(f"""UPDATE PRODUCTS SET {i} = '{value[i]}'
                        WHERE ID = {int(ID)}""")
                sg.popup('Data Updated')
                win.close()
        except mysql_errors.DatabaseError:
            msg.update('Wrong data entered...')
        #print(event,value)

cursor.execute('SELECT Name,Phone_Number,Email_ID,Total_Price FROM CUSTOMERS')
data = cursor.fetchall()
def cust_details():
    """This function shows the list of customers"""
    global data
    heading = ['Name','Phone_Number','Email_ID','Total_Purchase_Amt']
    table = sg.Table(data,headings=heading,key = 'cust_Table',enable_events=True)
    layout = [[sg.Radio("Sort by Purchase Amount",group_id='sort',key = 'sort_amt',
        enable_events=True),
        sg.Radio("Sort by Name",default=True,group_id='sort',key = 'sort_name',enable_events=True)],
    [sg.Text('Search by Name',size = (14,1)),sg.Input(key = 'name',enable_events=True)],
    [sg.Text('Search by Email ID',size = (14,1)),sg.Input(key = 'email',enable_events=True)],
    [sg.Text('Search by Mobile',size = (14,1)),sg.Input(key = 'mob',enable_events=True)],
    [table],
    [sg.Input(key = 'show_det'),sg.Button('Show Details', disabled=True,key = 'show')],
    [sg.Button('Exit')]
    ]
    return layout

def show_details(dat):#dat is a tuple containing name, mob, email, pur_amount
    """This function shows the details of the customer"""
    heading = ['Invoice Number', 'Total Cost', 'Purchase date']
    cursor.execute(f"""SELECT INVOICE_NUMBER, PURCHASE_DATE, SUM(PRODUCT_TOT_COST) FROM PURCHASE
    WHERE CUSTOMER_EMAIL = '{dat[2]}'
    GROUP BY INVOICE_NUMBER""")
    purchase_data = cursor.fetchall()
    print(1,purchase_data)
    if not purchase_data:
        sg.popup('NO DATA FOUND')
    
    else:
        table = sg.Table(purchase_data,headings=heading,key='pur_table',enable_events=True)
        layout = [
        [sg.Text(f'Name: {dat[0]}')],
        [sg.Text(f'Mobile Number: {dat[1]}')],
        [sg.Text(f'Email: {dat[2]}')],
        [sg.Text(f'Total Amount Purchased: {round(dat[3],2)}')],
        [table],
        [sg.Button('Exit',key = 'Exit'),sg.Button('Show More',disabled = True,key='show_more')]
        ]
        win = sg.Window(f'{dat[2]}',layout)
        while True:
            event1,value = win.read()  #Extracting only event
            print(event1, value)
            if event1  in ('Exit',None):
                win.close()
                break
            if event1 == 'pur_table' and value['pur_table'] != []:
                win['show_more'].update(disabled=False)
            if event1 == 'show_more' and value['pur_table'] != []:
                ind_select = value['pur_table'][0]
                inv_num = purchase_data[ind_select][0]
                date = purchase_data[ind_select][1]
                more_details(inv_num,date)
                
def more_details(invoice,date):
    #print(254,invoice)
    cursor.execute(f"""SELECT Product_ID ,Product_Name ,Product_Brand ,Product_Size ,
            Product_Category ,Quantity_Purchased ,Product_tot_cost FROM PURCHASE
            WHERE Invoice_Number = '{invoice}'""")
    specific_info = cursor.fetchall()
    heading = ['Product_ID' ,'Product_Name' ,'Product_Brand' ,'Product_Size' ,
            'Product_Category' ,'Quantity_Purchased' ,'Product_tot_cost']
    table = sg.Table(headings=heading,values = specific_info)
    layout = [[sg.Text(f'INVOICE NUMBER: {invoice}')],[sg.Text(f'DATE OF PURCHASE: {date}')],
    [table]]
    prod_win = sg.Window(title = 'More Information', layout=layout)
    while True:
        event,value = prod_win.read()
        print(event,value)
        if event is None:
            break
    
    
def daily_profit(days):
    """This function plots daily profit"""
    cursor.execute(f"""SELECT PURCHASE_DATE,SUM(PRODUCT_TOT_COST) FROM PURCHASE
    GROUP BY PURCHASE_DATE 
    ORDER BY PURCHASE_DATE DESC LIMIT {days}""")
    prof_day = cursor.fetchall()
    dates = [prof_day[i][0] for i in range(len(prof_day))] #Extracting dates from sql db
    amt = [prof_day[i][1] for i in range(len(prof_day))] #Extracting daily profit from sql db
    print(dates)
    plt.plot_date(dates,amt,linestyle='solid')
    plt.gcf().autofmt_xdate()
    date_format = mpl_dates.DateFormatter('%b, %d %Y')
    plt.gca().xaxis.set_major_formatter(date_format)
    plt.title('Daily Profit (Last 7 days)')
    plt.ylabel('Profit in rupees')
    plt.xlabel('Date')
    plt.grid()
    plt.show()
def monthly(year1,year2):
    """This function plots monthly sale"""
    cursor.execute(f"""select DATE_FORMAT(purchase_date ,'%M'), sum(Product_tot_cost)
     FROM PURCHASE WHERE YEAR(PURCHASE_DATE) = {year1}
     GROUP BY YEAR(PURCHASE_DATE), MONTH(PURCHASE_DATE);""")
    year_1data = cursor.fetchall()
    months = [i[0] for i in year_1data]
    profit_1 = [i[1] for i in year_1data]
    x_axis = np.arange(len(months))
    width = 0.4
    plt.bar(x_axis,profit_1,width=width,label = year1,align = 'center')
    
    cursor.execute(f"""select DATE_FORMAT(purchase_date ,'%M %Y'), sum(Product_tot_cost)
     FROM PURCHASE WHERE YEAR(PURCHASE_DATE) = {year2}
     GROUP BY YEAR(PURCHASE_DATE), MONTH(PURCHASE_DATE);""")
    year_2data = cursor.fetchall()
    
    profit2 = [i[1] for i in year_2data]
    plt.bar(x_axis+width,profit2,width=width,label = year2)
    plt.legend()
    plt.xticks(ticks = x_axis,labels=months,rotation = 45)
    plt.xlabel("Month")
    plt.ylabel("Profit")
    plt.grid()
    figManager = plt.get_current_fig_manager()
    figManager.window.state('zoomed')
    plt.show()
def categ_chart():
    """This function plots the categorical popularity chart"""
    cursor.execute("""select sum(quantity_purchased), product_category from purchase
        group by product_category;""")
    cat_data = cursor.fetchall()
    #print(cat_data)
    sale_data = [cat_data[i][0] for i in range(len(cat_data))]
    label = [cat_data[i][1] for i in range(len(cat_data))]
    print(sale_data,label)
    plt.pie(sale_data,labels = label,shadow=True, autopct = '%1.1f%%',
        wedgeprops={'edgecolor':'black'})
    plt.show()

def categ_rev_comp(year1,year2):
    y1 = min(year1,year2)
    y2 = max(year1,year2)
    cursor.execute(f"""select sum(product_tot_cost), product_category from purchase
        where year(purchase_date) between {y1} and {y2}
        group by product_category;""")
    cat_data = cursor.fetchall()
    #print(cat_data)
    sale_data = [cat_data[i][0] for i in range(len(cat_data))]
    label = [cat_data[i][1] for i in range(len(cat_data))]
    print(sale_data,label)
    plt.pie(sale_data,labels = label,shadow=True, autopct = '%1.1f%%',
        wedgeprops={'edgecolor':'black'})
    plt.show()

def categ_rev_trend(year):
    cursor.execute(f"""select sum(product_tot_cost), monthname(purchase_date) from purchase 
    where year(purchase_date) = {year} and product_category = 'Men' 
    group by monthname(purchase_date)""")
    men = cursor.fetchall()
    cursor.execute(f"""select sum(product_tot_cost), monthname(purchase_date) from purchase 
    where year(purchase_date) = {year} and product_category = 'Women' 
    group by monthname(purchase_date)""")
    women = cursor.fetchall()
    cursor.execute(f"""select sum(product_tot_cost), monthname(purchase_date) from purchase 
    where year(purchase_date) = {year} and product_category = 'Kids' 
    group by monthname(purchase_date)""")
    kid = cursor.fetchall()

def brand_rev_comp(year1,year2):
    pass
def brand_item():
    """This function plots brand popularity graph"""
    cursor.execute("""select sum(quantity_purchased), product_brand from purchase

        group by Product_brand;""")
    sold_data = cursor.fetchall()
    no_item = [sold_data[i][0] for i in  range(len(sold_data))] #y-axis
    brand_name = [sold_data[i][1] for i in range(len(sold_data))] #x-axis
    plt.barh(brand_name,no_item)
    plt.tight_layout()
    plt.ylabel("Brand Name")
    plt.xlabel("Quantity Purchased")
    plt.show()

if __name__=='__main__':
    main()
mycon.commit()
